generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  STUDENT
  ADVISER
  INSTRUCTOR
}

model User {
  id        String   @id @unique
  email     String   @unique
  firstName String
  lastName  String
  picture   String?
  role      Role?
  section   Section? @relation(fields: [sectionId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  group     Group[]
  sectionId String?
  task      Task[]
  comments  Comment[]
}

model Section {
  id   String @id @unique @default(cuid())
  name String @unique
  user User[]
}

model Group {
  id      String  @id @unique @default(cuid())
  members User[]
  title   String? @default("Untitled")
  pdfFile String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  tasks     Task[]
  comments  Comment[]
}

enum TaskStatus {
  PENDING
  ONGOING
  COMPLETE
}

enum TaskPriority {
  LOW
  MIDIUM
  HIGH
}

enum TaskTypes {
  DOCUMENTATION
  DEVELOPMENT
  DESIGN
}

model Task {
  id        String       @id @unique @default(cuid())
  title     String
  status    TaskStatus
  type      TaskTypes?
  priority  TaskPriority
  position  Int
  dueDate   DateTime
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  group   Group  @relation(fields: [groupId], references: [id])
  groupId String

  assignee   User?   @relation(fields: [assigneeId], references: [id])
  assigneeId String?
}

enum CommentStatus {
  NEW
  OLD
}

model Comment {
  id          String        @id @unique @default(cuid())
  description String
  status      CommentStatus @default(NEW)
  author      User          @relation(fields: [authorId], references: [id])
  authorId    String
  createdAt   DateTime
  group       Group         @relation(fields: [groupId], references: [id])
  groupId     String
}
