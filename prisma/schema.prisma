generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  STUDENT
  ADVISER
  INSTRUCTOR
}

model User {
  id        String   @id @unique
  email     String   @unique
  firstName String
  lastName  String
  picture   String?
  role      Role?
  section   Section? @relation(fields: [sectionId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  group     Group[]
  sectionId String?
  task      Task[]
  comments  Comment[]
  chats     Chat[]
}

model Section {
  id   String @id @unique @default(cuid())
  name String @unique
  user User[]
}

model Group {
  id      String  @id @unique @default(cuid())
  members User[]
  title   String? @default("Untitled")

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  tasks     Task[]
  documents Document[]
  chats     Chat[]
}

enum DocumentStatus {
  REJECTED
  APPROVED
  PENDING
}

model Document {
  id        String         @id @unique @default(cuid())
  file      String
  url       String
  key       String
  group     Group          @relation(fields: [groupId], references: [id])
  createdAt DateTime       @default(now())
  comments  Comment[]
  groupId   String
  status    DocumentStatus @default(PENDING)
}

enum TaskStatus {
  PENDING
  ONGOING
  COMPLETE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum TaskTypes {
  DOCUMENTATION
  DEVELOPMENT
  DESIGN
  OTHER
}

model Task {
  id        String       @id @unique @default(cuid())
  title     String
  status    TaskStatus
  type      TaskTypes
  priority  TaskPriority
  position  Int
  dueDate   DateTime
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  group   Group  @relation(fields: [groupId], references: [id])
  groupId String

  assignee   User   @relation(fields: [assigneeId], references: [id])
  assigneeId String
}

model Comment {
  id         String    @id @unique @default(cuid())
  content    String
  author     User      @relation(fields: [authorId], references: [id])
  authorId   String
  createdAt  DateTime  @default(now())
  document   Document? @relation(fields: [documentId], references: [id])
  documentId String?
}

model Chat {
  id        String   @id @unique @default(cuid())
  content   String
  createdAt DateTime @default(now())

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  group   Group  @relation(fields: [groupId], references: [id])
  groupId String
}
